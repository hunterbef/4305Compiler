
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SplParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SplParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\010" +
    "\000\002\004\006\000\002\004\011\000\002\004\013\000" +
    "\002\004\012\000\002\004\014\000\002\005\005\000\002" +
    "\005\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\006" +
    "\000\002\012\005\000\002\012\004\000\002\012\005\000" +
    "\002\014\005\000\002\014\007\000\002\013\003\000\002" +
    "\013\005\000\002\015\006\000\002\015\005\000\002\015" +
    "\005\000\002\016\003\000\002\016\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\010\000\002\010\005\000\002\010" +
    "\006\000\002\010\005\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\011\003\000\002\011\005\000" +
    "\002\017\005\000\002\017\007\000\002\006\005\000\002" +
    "\006\005\000\002\006\006\000\002\006\005\000\002\006" +
    "\006\000\002\006\005\000\002\006\006\000\002\006\007" +
    "\000\002\006\011\000\002\006\013\000\002\006\015\000" +
    "\002\006\007\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\007\004\000\002\007" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\060\004\021\005\023\006\033\007\034\011" +
    "\040\014\027\020\004\021\030\023\035\024\016\026\012" +
    "\030\013\032\032\033\006\034\014\037\024\040\042\041" +
    "\011\043\031\045\015\061\010\063\022\065\036\001\002" +
    "\000\006\016\uffb5\055\uffb5\001\002\000\060\004\021\005" +
    "\023\006\033\007\034\011\040\014\027\020\004\021\030" +
    "\023\035\024\016\026\012\030\013\032\032\033\006\034" +
    "\014\037\024\040\042\041\011\043\031\045\015\061\010" +
    "\063\022\065\036\001\002\000\004\061\306\001\002\000" +
    "\042\010\064\015\075\027\067\031\102\042\072\043\065" +
    "\044\077\046\101\047\103\050\073\051\100\052\071\053" +
    "\070\057\066\060\074\065\076\001\002\000\034\004\060" +
    "\005\023\006\033\007\034\011\040\021\030\030\013\043" +
    "\031\045\015\061\010\062\304\063\061\065\036\001\002" +
    "\000\004\061\277\001\002\000\052\004\021\005\023\006" +
    "\033\007\034\011\040\020\004\021\030\023\035\024\016" +
    "\026\012\030\013\032\032\033\006\034\014\041\011\043" +
    "\031\045\015\061\010\063\022\065\036\001\002\000\032" +
    "\004\060\005\023\006\033\007\034\011\040\021\030\030" +
    "\013\043\031\045\015\061\010\063\061\065\036\001\002" +
    "\000\036\004\060\005\023\006\033\007\034\011\040\016" +
    "\uffb4\021\030\030\013\043\031\045\015\055\uffb4\061\010" +
    "\063\061\065\036\001\002\000\062\010\uffdf\013\uffdf\015" +
    "\uffdf\016\uffdf\027\uffdf\031\uffdf\036\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\062\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\001\002\000\004\061\266\001\002\000" +
    "\004\002\000\001\002\000\004\002\265\001\002\000\004" +
    "\061\260\001\002\000\060\004\257\005\023\006\033\007" +
    "\034\011\040\014\027\020\004\021\030\023\035\024\016" +
    "\026\012\030\013\032\032\033\006\034\014\037\024\040" +
    "\042\041\011\043\031\045\015\061\010\063\022\065\036" +
    "\001\002\000\062\010\uffe0\013\uffe0\015\uffe0\016\uffe0\027" +
    "\uffe0\031\uffe0\036\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\001\002\000\004\004\253\001\002\000\004\055\252\001" +
    "\002\000\056\002\ufffe\004\021\005\023\006\033\007\034" +
    "\011\040\020\004\021\030\023\035\024\016\026\012\030" +
    "\013\032\032\033\006\034\014\041\011\043\031\045\015" +
    "\061\010\063\022\064\ufffe\065\036\001\002\000\004\004" +
    "\223\001\002\000\062\010\uffde\013\uffde\015\uffde\016\uffde" +
    "\027\uffde\031\uffde\036\uffde\042\uffde\043\uffde\044\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\062\uffde\064\uffde\065\uffde\066" +
    "\uffde\001\002\000\032\004\060\005\023\006\033\007\034" +
    "\011\040\021\030\030\013\043\031\045\015\061\010\063" +
    "\061\065\036\001\002\000\004\061\216\001\002\000\062" +
    "\010\uffe2\013\uffe2\015\uffe2\016\uffe2\027\uffe2\031\uffe2\036" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002\000\062" +
    "\010\uffe1\013\uffe1\015\uffe1\016\uffe1\027\uffe1\031\uffe1\036" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000\004" +
    "\061\202\001\002\000\032\004\060\005\023\006\033\007" +
    "\034\011\040\021\030\030\013\043\031\045\015\061\010" +
    "\063\061\065\036\001\002\000\044\010\uffdd\015\uffdd\017" +
    "\176\027\uffdd\031\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\057\uffdd\060" +
    "\uffdd\065\uffdd\001\002\000\004\061\171\001\002\000\004" +
    "\055\170\001\002\000\004\004\043\001\002\000\006\017" +
    "\044\054\045\001\002\000\032\004\060\005\023\006\033" +
    "\007\034\011\040\021\030\030\013\043\031\045\015\061" +
    "\010\063\061\065\036\001\002\000\022\004\053\011\050" +
    "\012\051\022\056\025\046\035\052\061\047\063\054\001" +
    "\002\000\020\017\ufff4\055\ufff4\056\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\066\ufff4\001\002\000\024\004\053\011\050\012" +
    "\051\022\056\025\046\035\052\061\047\062\163\063\054" +
    "\001\002\000\004\065\156\001\002\000\020\017\ufff1\055" +
    "\ufff1\056\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1\001\002" +
    "\000\020\017\ufff2\055\ufff2\056\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\066\ufff2\001\002\000\020\017\ufff0\055\ufff0\056\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\066\ufff0\001\002\000\004\004" +
    "\145\001\002\000\004\017\057\001\002\000\020\017\ufff3" +
    "\055\ufff3\056\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3\001" +
    "\002\000\032\004\060\005\023\006\033\007\034\011\040" +
    "\021\030\030\013\043\031\045\015\061\010\063\061\065" +
    "\036\001\002\000\004\061\136\001\002\000\004\004\125" +
    "\001\002\000\044\010\064\015\075\027\067\031\102\042" +
    "\072\043\065\044\077\046\101\047\103\050\073\051\100" +
    "\052\071\053\070\055\ufffc\057\066\060\074\065\076\001" +
    "\002\000\062\010\uffdd\013\uffdd\015\uffdd\016\uffdd\027\uffdd" +
    "\031\uffdd\036\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd\001" +
    "\002\000\032\004\060\005\023\006\033\007\034\011\040" +
    "\021\030\030\013\043\031\045\015\061\010\063\061\065" +
    "\036\001\002\000\032\004\060\005\023\006\033\007\034" +
    "\011\040\021\030\030\013\043\031\045\015\061\010\063" +
    "\061\065\036\001\002\000\004\006\122\001\002\000\032" +
    "\004\060\005\023\006\033\007\034\011\040\021\030\030" +
    "\013\043\031\045\015\061\010\063\061\065\036\001\002" +
    "\000\032\004\060\005\023\006\033\007\034\011\040\021" +
    "\030\030\013\043\031\045\015\061\010\063\061\065\036" +
    "\001\002\000\032\004\060\005\023\006\033\007\034\011" +
    "\040\021\030\030\013\043\031\045\015\061\010\063\061" +
    "\065\036\001\002\000\032\004\060\005\023\006\033\007" +
    "\034\011\040\021\030\030\013\043\031\045\015\061\010" +
    "\063\061\065\036\001\002\000\032\004\060\005\023\006" +
    "\033\007\034\011\040\021\030\030\013\043\031\045\015" +
    "\061\010\063\061\065\036\001\002\000\004\004\114\001" +
    "\002\000\032\004\060\005\023\006\033\007\034\011\040" +
    "\021\030\030\013\043\031\045\015\061\010\063\061\065" +
    "\036\001\002\000\032\004\060\005\023\006\033\007\034" +
    "\011\040\021\030\030\013\043\031\045\015\061\010\063" +
    "\061\065\036\001\002\000\032\004\060\005\023\006\033" +
    "\007\034\011\040\021\030\030\013\043\031\045\015\061" +
    "\010\063\061\065\036\001\002\000\032\004\060\005\023" +
    "\006\033\007\034\011\040\021\030\030\013\043\031\045" +
    "\015\061\010\063\061\065\036\001\002\000\032\004\060" +
    "\005\023\006\033\007\034\011\040\021\030\030\013\043" +
    "\031\045\015\061\010\063\061\065\036\001\002\000\032" +
    "\004\060\005\023\006\033\007\034\011\040\021\030\030" +
    "\013\043\031\045\015\061\010\063\061\065\036\001\002" +
    "\000\032\004\060\005\023\006\033\007\034\011\040\021" +
    "\030\030\013\043\031\045\015\061\010\063\061\065\036" +
    "\001\002\000\046\010\uffd0\013\uffd0\015\075\016\uffd0\027" +
    "\067\031\uffd0\036\uffd0\042\072\043\065\044\077\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\062\uffd0\064\uffd0\065\076\066" +
    "\uffd0\001\002\000\062\010\064\013\uffd4\015\075\016\uffd4" +
    "\027\067\031\uffd4\036\uffd4\042\072\043\065\044\077\046" +
    "\101\047\103\050\073\051\100\052\071\053\070\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\062\uffd4\064\uffd4\065\076\066" +
    "\uffd4\001\002\000\046\010\uffd1\013\uffd1\015\075\016\uffd1" +
    "\027\067\031\uffd1\036\uffd1\042\072\043\065\044\077\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\062\uffd1\064\uffd1\065\076" +
    "\066\uffd1\001\002\000\046\010\uffce\013\uffce\015\075\016" +
    "\uffce\027\067\031\uffce\036\uffce\042\072\043\065\044\077" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\062\uffce\064\uffce\065" +
    "\076\066\uffce\001\002\000\062\010\uffd8\013\uffd8\015\uffd8" +
    "\016\uffd8\027\uffd8\031\uffd8\036\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\062\uffd8\064\uffd8\065" +
    "\076\066\uffd8\001\002\000\044\010\064\015\075\027\067" +
    "\031\102\042\072\043\065\044\077\046\101\047\103\050" +
    "\073\051\100\052\071\053\070\057\066\060\074\065\076" +
    "\066\112\001\002\000\064\010\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\027\uffe7\031\uffe7\036\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\001\002\000\062\010\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\027\uffd7\031\uffd7\036\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\062\uffd7\064\uffd7" +
    "\065\076\066\uffd7\001\002\000\064\010\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\027\uffe6\031\uffe6\036\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\001\002\000\046\010\uffcf\013" +
    "\uffcf\015\075\016\uffcf\027\067\031\uffcf\036\uffcf\042\072" +
    "\043\065\044\077\055\uffcf\056\uffcf\057\uffcf\060\uffcf\062" +
    "\uffcf\064\uffcf\065\076\066\uffcf\001\002\000\062\010\uffda" +
    "\013\uffda\015\075\016\uffda\027\067\031\uffda\036\uffda\042" +
    "\uffda\043\uffda\044\077\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\055\uffda\056\uffda\057\uffda\060\uffda\062" +
    "\uffda\064\uffda\065\076\066\uffda\001\002\000\046\010\uffd3" +
    "\013\uffd3\015\075\016\uffd3\027\067\031\uffd3\036\uffd3\042" +
    "\072\043\065\044\077\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\062\uffd3\064\uffd3\065\076\066\uffd3\001\002\000\046\010" +
    "\uffd2\013\uffd2\015\075\016\uffd2\027\067\031\uffd2\036\uffd2" +
    "\042\072\043\065\044\077\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\062\uffd2\064\uffd2\065\076\066\uffd2\001\002\000\062" +
    "\010\uffd6\013\uffd6\015\uffd6\016\uffd6\027\uffd6\031\uffd6\036" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\062\uffd6\064\uffd6\065\076\066\uffd6\001\002\000\064" +
    "\010\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\027\uffe5\031" +
    "\uffe5\036\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\062\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002" +
    "\000\062\010\uffd9\013\uffd9\015\075\016\uffd9\027\067\031" +
    "\uffd9\036\uffd9\042\uffd9\043\uffd9\044\077\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\062\uffd9\064\uffd9\065\076\066\uffd9\001\002" +
    "\000\062\010\uffd5\013\uffd5\015\075\016\uffd5\027\067\031" +
    "\uffd5\036\uffd5\042\072\043\065\044\077\046\101\047\103" +
    "\050\073\051\100\052\071\053\070\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\062\uffd5\064\uffd5\065\076\066\uffd5\001\002" +
    "\000\004\017\134\001\002\000\006\056\127\064\130\001" +
    "\002\000\004\004\131\001\002\000\062\010\uffca\013\uffca" +
    "\015\uffca\016\uffca\027\uffca\031\uffca\036\uffca\042\uffca\043" +
    "\uffca\044\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\055\uffca\056\uffca\057\uffca\060\uffca\062\uffca\064" +
    "\uffca\065\uffca\066\uffca\001\002\000\004\017\132\001\002" +
    "\000\032\004\060\005\023\006\033\007\034\011\040\021" +
    "\030\030\013\043\031\045\015\061\010\063\061\065\036" +
    "\001\002\000\046\010\064\015\075\027\067\031\102\042" +
    "\072\043\065\044\077\046\101\047\103\050\073\051\100" +
    "\052\071\053\070\056\uffc3\057\066\060\074\064\uffc3\065" +
    "\076\001\002\000\032\004\060\005\023\006\033\007\034" +
    "\011\040\021\030\030\013\043\031\045\015\061\010\063" +
    "\061\065\036\001\002\000\046\010\064\015\075\027\067" +
    "\031\102\042\072\043\065\044\077\046\101\047\103\050" +
    "\073\051\100\052\071\053\070\056\uffc4\057\066\060\074" +
    "\064\uffc4\065\076\001\002\000\034\004\060\005\023\006" +
    "\033\007\034\011\040\021\030\030\013\043\031\045\015" +
    "\061\010\062\141\063\061\065\036\001\002\000\006\056" +
    "\142\062\143\001\002\000\050\010\064\015\075\027\067" +
    "\031\102\042\072\043\065\044\077\046\101\047\103\050" +
    "\073\051\100\052\071\053\070\056\uffc6\057\066\060\074" +
    "\062\uffc6\065\076\066\uffc6\001\002\000\062\010\uffcc\013" +
    "\uffcc\015\uffcc\016\uffcc\027\uffcc\031\uffcc\036\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\062\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\001\002\000\032\004\060\005" +
    "\023\006\033\007\034\011\040\021\030\030\013\043\031" +
    "\045\015\061\010\063\061\065\036\001\002\000\062\010" +
    "\uffcb\013\uffcb\015\uffcb\016\uffcb\027\uffcb\031\uffcb\036\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\062\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000\050\010" +
    "\064\015\075\027\067\031\102\042\072\043\065\044\077" +
    "\046\101\047\103\050\073\051\100\052\071\053\070\056" +
    "\uffc5\057\066\060\074\062\uffc5\065\076\066\uffc5\001\002" +
    "\000\004\054\154\001\002\000\006\056\147\064\150\001" +
    "\002\000\004\004\151\001\002\000\020\017\uffee\055\uffee" +
    "\056\uffee\062\uffee\063\uffee\064\uffee\066\uffee\001\002\000" +
    "\004\054\152\001\002\000\022\004\053\011\050\012\051" +
    "\022\056\025\046\035\052\061\047\063\054\001\002\000" +
    "\010\056\uffea\062\uffea\064\uffea\001\002\000\022\004\053" +
    "\011\050\012\051\022\056\025\046\035\052\061\047\063" +
    "\054\001\002\000\010\056\uffeb\062\uffeb\064\uffeb\001\002" +
    "\000\022\004\053\011\050\012\051\022\056\025\046\035" +
    "\052\061\047\063\054\001\002\000\004\066\160\001\002" +
    "\000\020\017\uffef\055\uffef\056\uffef\062\uffef\063\uffef\064" +
    "\uffef\066\uffef\001\002\000\006\056\164\062\165\001\002" +
    "\000\006\056\uffe9\062\uffe9\001\002\000\020\017\uffed\055" +
    "\uffed\056\uffed\062\uffed\063\uffed\064\uffed\066\uffed\001\002" +
    "\000\022\004\053\011\050\012\051\022\056\025\046\035" +
    "\052\061\047\063\054\001\002\000\020\017\uffec\055\uffec" +
    "\056\uffec\062\uffec\063\uffec\064\uffec\066\uffec\001\002\000" +
    "\006\056\uffe8\062\uffe8\001\002\000\044\010\064\015\075" +
    "\027\067\031\102\042\072\043\065\044\077\046\101\047" +
    "\103\050\073\051\100\052\071\053\070\055\ufffd\057\066" +
    "\060\074\065\076\001\002\000\056\002\uffb2\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\011\uffb2\020\uffb2\021\uffb2\023\uffb2" +
    "\024\uffb2\026\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\041" +
    "\uffb2\043\uffb2\045\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\001\002\000\032\004\060\005\023\006\033\007\034\011" +
    "\040\021\030\030\013\043\031\045\015\061\010\063\061" +
    "\065\036\001\002\000\044\010\064\015\075\027\067\031" +
    "\102\042\072\043\065\044\077\046\101\047\103\050\073" +
    "\051\100\052\071\053\070\056\173\057\066\060\074\065" +
    "\076\001\002\000\032\004\060\005\023\006\033\007\034" +
    "\011\040\021\030\030\013\043\031\045\015\061\010\063" +
    "\061\065\036\001\002\000\044\010\064\015\075\027\067" +
    "\031\102\042\072\043\065\044\077\046\101\047\103\050" +
    "\073\051\100\052\071\053\070\057\066\060\074\062\175" +
    "\065\076\001\002\000\062\010\uffcd\013\uffcd\015\uffcd\016" +
    "\uffcd\027\uffcd\031\uffcd\036\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\062\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\001\002\000\032\004\060\005\023\006\033\007" +
    "\034\011\040\021\030\030\013\043\031\045\015\061\010" +
    "\063\061\065\036\001\002\000\046\010\064\015\075\016" +
    "\uffc2\027\067\031\102\042\072\043\065\044\077\046\101" +
    "\047\103\050\073\051\100\052\071\053\070\055\uffc2\057" +
    "\066\060\074\065\076\001\002\000\006\056\142\066\201" +
    "\001\002\000\062\010\uffc7\013\uffc7\015\uffc7\016\uffc7\027" +
    "\uffc7\031\uffc7\036\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\001\002\000\004\004\203\001\002\000\004\017\204\001" +
    "\002\000\032\004\060\005\023\006\033\007\034\011\040" +
    "\021\030\030\013\043\031\045\015\061\010\063\061\065" +
    "\036\001\002\000\044\010\064\015\075\027\067\031\102" +
    "\036\206\042\072\043\065\044\077\046\101\047\103\050" +
    "\073\051\100\052\071\053\070\057\066\060\074\065\076" +
    "\001\002\000\032\004\060\005\023\006\033\007\034\011" +
    "\040\021\030\030\013\043\031\045\015\061\010\063\061" +
    "\065\036\001\002\000\046\010\064\013\211\015\075\027" +
    "\067\031\102\042\072\043\065\044\077\046\101\047\103" +
    "\050\073\051\100\052\071\053\070\057\066\060\074\062" +
    "\210\065\076\001\002\000\052\004\021\005\023\006\033" +
    "\007\034\011\040\020\004\021\030\023\035\024\016\026" +
    "\012\030\013\032\032\033\006\034\014\041\011\043\031" +
    "\045\015\061\010\063\022\065\036\001\002\000\032\004" +
    "\060\005\023\006\033\007\034\011\040\021\030\030\013" +
    "\043\031\045\015\061\010\063\061\065\036\001\002\000" +
    "\044\010\064\015\075\027\067\031\102\042\072\043\065" +
    "\044\077\046\101\047\103\050\073\051\100\052\071\053" +
    "\070\057\066\060\074\062\213\065\076\001\002\000\052" +
    "\004\021\005\023\006\033\007\034\011\040\020\004\021" +
    "\030\023\035\024\016\026\012\030\013\032\032\033\006" +
    "\034\014\041\011\043\031\045\015\061\010\063\022\065" +
    "\036\001\002\000\006\016\uffb8\055\uffb8\001\002\000\006" +
    "\016\uffb9\055\uffb9\001\002\000\034\004\060\005\023\006" +
    "\033\007\034\011\040\021\030\030\013\043\031\045\015" +
    "\061\010\062\220\063\061\065\036\001\002\000\006\056" +
    "\142\062\221\001\002\000\006\016\uffbd\055\uffbd\001\002" +
    "\000\006\016\uffbc\055\uffbc\001\002\000\062\010\uffdc\013" +
    "\uffdc\015\uffdc\016\uffdc\027\uffdc\031\uffdc\036\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc" +
    "\064\uffdc\065\076\066\uffdc\001\002\000\004\061\224\001" +
    "\002\000\006\004\145\062\226\001\002\000\006\056\147" +
    "\062\237\001\002\000\006\054\227\063\230\001\002\000" +
    "\022\004\053\011\050\012\051\022\056\025\046\035\052" +
    "\061\047\063\054\001\002\000\060\004\021\005\023\006" +
    "\033\007\034\011\040\014\027\020\004\021\030\023\035" +
    "\024\016\026\012\030\013\032\032\033\006\034\014\037" +
    "\024\040\042\041\011\043\031\045\015\061\010\063\022" +
    "\065\036\001\002\000\004\064\232\001\002\000\004\055" +
    "\ufffa\001\002\000\004\063\234\001\002\000\060\004\021" +
    "\005\023\006\033\007\034\011\040\014\027\020\004\021" +
    "\030\023\035\024\016\026\012\030\013\032\032\033\006" +
    "\034\014\037\024\040\042\041\011\043\031\045\015\061" +
    "\010\063\022\065\036\001\002\000\004\064\236\001\002" +
    "\000\004\055\ufff9\001\002\000\006\054\240\063\241\001" +
    "\002\000\022\004\053\011\050\012\051\022\056\025\046" +
    "\035\052\061\047\063\054\001\002\000\060\004\021\005" +
    "\023\006\033\007\034\011\040\014\027\020\004\021\030" +
    "\023\035\024\016\026\012\030\013\032\032\033\006\034" +
    "\014\037\024\040\042\041\011\043\031\045\015\061\010" +
    "\063\022\065\036\001\002\000\004\064\243\001\002\000" +
    "\004\055\ufff8\001\002\000\004\063\245\001\002\000\060" +
    "\004\021\005\023\006\033\007\034\011\040\014\027\020" +
    "\004\021\030\023\035\024\016\026\012\030\013\032\032" +
    "\033\006\034\014\037\024\040\042\041\011\043\031\045" +
    "\015\061\010\063\022\065\036\001\002\000\004\064\247" +
    "\001\002\000\004\055\ufff7\001\002\000\004\055\251\001" +
    "\002\000\056\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\011\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\026\uffb1\030" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\041\uffb1\043\uffb1\045\uffb1" +
    "\061\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002\000\060\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\014\ufff5\020\ufff5" +
    "\021\ufff5\023\ufff5\024\ufff5\026\ufff5\030\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\045\ufff5" +
    "\061\ufff5\063\ufff5\065\ufff5\001\002\000\004\017\254\001" +
    "\002\000\022\004\053\011\050\012\051\022\056\025\046" +
    "\035\052\061\047\063\054\001\002\000\004\055\ufffb\001" +
    "\002\000\004\064\264\001\002\000\006\017\134\061\260" +
    "\001\002\000\034\004\060\005\023\006\033\007\034\011" +
    "\040\021\030\030\013\043\031\045\015\061\010\062\262" +
    "\063\061\065\036\001\002\000\006\056\142\062\263\001" +
    "\002\000\046\010\uffcc\015\uffcc\016\uffc1\027\uffcc\031\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\055\uffc1\057\uffcc\060\uffcc\065\uffcc" +
    "\001\002\000\046\010\uffcb\015\uffcb\016\uffc0\027\uffcb\031" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\055\uffc0\057\uffcb\060\uffcb\065" +
    "\uffcb\001\002\000\006\016\uffbf\055\uffbf\001\002\000\004" +
    "\002\001\001\002\000\032\004\060\005\023\006\033\007" +
    "\034\011\040\021\030\030\013\043\031\045\015\061\010" +
    "\063\061\065\036\001\002\000\044\010\064\015\075\027" +
    "\067\031\102\042\072\043\065\044\077\046\101\047\103" +
    "\050\073\051\100\052\071\053\070\057\066\060\074\062" +
    "\270\065\076\001\002\000\052\004\021\005\023\006\033" +
    "\007\034\011\040\020\004\021\030\023\035\024\016\026" +
    "\012\030\013\032\032\033\006\034\014\041\011\043\031" +
    "\045\015\061\010\063\022\065\036\001\002\000\006\016" +
    "\272\055\uffbb\001\002\000\052\004\021\005\023\006\033" +
    "\007\034\011\040\020\004\021\030\023\035\024\016\026" +
    "\012\030\013\032\032\033\006\034\014\041\011\043\031" +
    "\045\015\061\010\063\022\065\036\001\002\000\006\016" +
    "\uffba\055\uffba\001\002\000\046\010\064\015\075\016\uffb3" +
    "\027\067\031\102\042\072\043\065\044\077\046\101\047" +
    "\103\050\073\051\100\052\071\053\070\055\uffb3\057\066" +
    "\060\074\065\076\001\002\000\062\010\uffdb\013\uffdb\015" +
    "\075\016\uffdb\027\067\031\uffdb\036\uffdb\042\072\043\065" +
    "\044\077\046\101\047\103\050\073\051\100\052\071\053" +
    "\070\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\064\uffdb" +
    "\065\076\066\uffdb\001\002\000\006\016\uffb6\055\uffb6\001" +
    "\002\000\032\004\060\005\023\006\033\007\034\011\040" +
    "\021\030\030\013\043\031\045\015\061\010\063\061\065" +
    "\036\001\002\000\044\010\064\015\075\027\067\031\102" +
    "\042\072\043\065\044\077\046\101\047\103\050\073\051" +
    "\100\052\071\053\070\057\066\060\074\062\301\065\076" +
    "\001\002\000\052\004\021\005\023\006\033\007\034\011" +
    "\040\020\004\021\030\023\035\024\016\026\012\030\013" +
    "\032\032\033\006\034\014\041\011\043\031\045\015\061" +
    "\010\063\022\065\036\001\002\000\006\016\uffb7\055\uffb7" +
    "\001\002\000\006\056\142\062\305\001\002\000\062\010" +
    "\uffc9\013\uffc9\015\uffc9\016\uffc9\027\uffc9\031\uffc9\036\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\062\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000\062\010" +
    "\uffc8\013\uffc8\015\uffc8\016\uffc8\027\uffc8\031\uffc8\036\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\062\uffc8\064\uffc8\065\uffc8\066\uffc8\001\002\000\032\004" +
    "\060\005\023\006\033\007\034\011\040\021\030\030\013" +
    "\043\031\045\015\061\010\063\061\065\036\001\002\000" +
    "\006\056\311\062\312\001\002\000\046\010\uffdd\015\uffdd" +
    "\027\uffdd\031\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\056\uffe4\057\uffdd" +
    "\060\uffdd\062\uffe4\065\uffdd\001\002\000\032\004\060\005" +
    "\023\006\033\007\034\011\040\021\030\030\013\043\031" +
    "\045\015\061\010\063\061\065\036\001\002\000\006\016" +
    "\uffbe\055\uffbe\001\002\000\046\010\uffdd\015\uffdd\027\uffdd" +
    "\031\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\056\uffe3\057\uffdd\060\uffdd" +
    "\062\uffe3\065\uffdd\001\002\000\004\055\316\001\002\000" +
    "\056\002\uffff\004\021\005\023\006\033\007\034\011\040" +
    "\020\004\021\030\023\035\024\016\026\012\030\013\032" +
    "\032\033\006\034\014\041\011\043\031\045\015\061\010" +
    "\063\022\064\uffff\065\036\001\002\000\060\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\014\ufff6\020\ufff6\021\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\030\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\045\ufff6\061\ufff6" +
    "\063\ufff6\065\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\022\002\017\003\016\004\024\005\004\006" +
    "\040\007\025\010\006\015\036\001\001\000\002\001\001" +
    "\000\014\004\313\006\040\007\314\010\006\015\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\137" +
    "\011\302\015\062\001\001\000\002\001\001\000\010\006" +
    "\275\010\006\015\036\001\001\000\006\010\274\015\062" +
    "\001\001\000\006\010\273\015\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\255\004\024\005\004\006" +
    "\040\007\025\010\006\015\036\017\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\247\010\006\015\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\221\015\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\137\011\177\015\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\166\015\062\001\001\000" +
    "\004\012\054\001\001\000\002\001\001\000\006\012\161" +
    "\013\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\061\015" +
    "\062\001\001\000\002\001\001\000\004\017\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\123\015" +
    "\062\001\001\000\006\010\122\015\062\001\001\000\002" +
    "\001\001\000\006\010\120\015\062\001\001\000\006\010" +
    "\117\015\062\001\001\000\006\010\116\015\062\001\001" +
    "\000\006\010\115\015\062\001\001\000\006\010\114\015" +
    "\062\001\001\000\002\001\001\000\006\010\112\015\062" +
    "\001\001\000\006\010\110\015\062\001\001\000\006\010" +
    "\107\015\062\001\001\000\006\010\106\015\062\001\001" +
    "\000\006\010\105\015\062\001\001\000\006\010\104\015" +
    "\062\001\001\000\006\010\103\015\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\132\015" +
    "\062\001\001\000\002\001\001\000\006\010\134\015\062" +
    "\001\001\000\002\001\001\000\010\010\137\011\136\015" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\143\015\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\152\001\001\000\002\001\001\000\004\012\154" +
    "\001\001\000\002\001\001\000\004\012\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\171\015\062\001\001\000\002\001" +
    "\001\000\006\010\173\015\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\176\015\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\204\015\062\001" +
    "\001\000\002\001\001\000\006\010\206\015\062\001\001" +
    "\000\002\001\001\000\010\006\214\010\006\015\036\001" +
    "\001\000\006\010\211\015\062\001\001\000\002\001\001" +
    "\000\010\006\213\010\006\015\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\137\011\216\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\232\001\001\000\020\003\230\004\024\005\004\006\040" +
    "\007\025\010\006\015\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\234\004\024" +
    "\005\004\006\040\007\025\010\006\015\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\243\001\001\000\020\003\241\004\024\005\004\006" +
    "\040\007\025\010\006\015\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\245\004" +
    "\024\005\004\006\040\007\025\010\006\015\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\137\011\260\015\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\266\015\062" +
    "\001\001\000\002\001\001\000\010\006\270\010\006\015" +
    "\036\001\001\000\002\001\001\000\010\006\272\010\006" +
    "\015\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\277\015\062" +
    "\001\001\000\002\001\001\000\010\006\301\010\006\015" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\006\015\307\016" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\006\015\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\247\010\006\015\036" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SplParser$actions {
  private final SplParser parser;

  /** Constructor */
  CUP$SplParser$actions(SplParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SplParser$do_action_part00000000(
    int                        CUP$SplParser$act_num,
    java_cup.runtime.lr_parser CUP$SplParser$parser,
    java.util.Stack            CUP$SplParser$stack,
    int                        CUP$SplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SplParser$result;

      /* select the action based on the action number */
      switch (CUP$SplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		RESULT = start_val;
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SplParser$parser.done_parsing();
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= block_content 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		BlockSt b = (BlockSt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 SPL.setAST(new Program(b)); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block_content ::= defs stmts 
            {
              BlockSt RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Definition> dl = (List<Definition>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BlockSt(dl,sl); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("block_content",1, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block_content ::= stmts 
            {
              BlockSt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BlockSt(nil,sl); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("block_content",1, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def ::= VAR ID EQUAL expr 
            {
              Definition RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new VarDef(nm, new NoType(), e); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("def",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def ::= VAR ID COLON type EQUAL expr 
            {
              Definition RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new VarDef(nm, t, e); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("def",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def ::= TYPE ID EQUAL type 
            {
              Definition RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new TypeDef(nm, t); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("def",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // def ::= DEF ID LP RP LB block_content RB 
            {
              Definition RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-5)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-5)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		BlockSt b = (BlockSt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new FuncDef(nm, nil, new NoType(), b); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("def",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // def ::= DEF ID LP RP COLON type LB block_content RB 
            {
              Definition RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-7)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-7)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		BlockSt b = (BlockSt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new FuncDef(nm, nil, t, b); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("def",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def ::= DEF ID LP type_binds RP LB block_content RB 
            {
              Definition RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).value;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).right;
		List<Bind<Type>> tb = (List<Bind<Type>>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		BlockSt b = (BlockSt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new FuncDef(nm, tb, new NoType(), b); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("def",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def ::= DEF ID LP type_binds RP COLON type LB block_content RB 
            {
              Definition RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)).value;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).right;
		List<Bind<Type>> tb = (List<Bind<Type>>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		BlockSt b = (BlockSt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new FuncDef(nm, tb, t, b); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("def",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-9)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // defs ::= defs def SEMI 
            {
              List<Definition> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		List<Definition> dl = (List<Definition>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = append(dl, d); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("defs",3, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // defs ::= def SEMI 
            {
              List<Definition> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Definition d = (Definition)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = append(nil,d); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("defs",3, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= ID 
            {
              Type RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new NamedType(nm); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= ARRAY LSB type RSB 
            {
              Type RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new ArrayType(tp); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= LB type_binds RB 
            {
              Type RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Bind<Type>> tb = (List<Bind<Type>>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new RecordType(tb); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= LP RP 
            {
              Type RESULT =null;
		 RESULT = new NoType(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= LP types RP 
            {
              Type RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Type> ts = (List<Type>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new TupleType(ts); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_binds ::= ID COLON type 
            {
              List<Bind<Type>> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(nil, new Bind(nm, t)); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type_binds",10, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_binds ::= type_binds COMMA ID COLON type 
            {
              List<Bind<Type>> RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).right;
		List<Bind<Type>> tb = (List<Bind<Type>>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(tb, new Bind(nm, t)); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("type_binds",10, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // types ::= type 
            {
              List<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(nil,t); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // types ::= types COMMA type 
            {
              List<Type> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		List<Type> ts = (List<Type>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(ts, t); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lvalue ::= expr LSB expr RSB 
            {
              Lvalue RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new ArrayDeref(e1, e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("lvalue",11, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lvalue ::= expr DOT ID 
            {
              Lvalue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new RecordDeref(e, nm); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("lvalue",11, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lvalue ::= expr SHARP INTEGER_LITERAL 
            {
              Lvalue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new TupleDeref(e, n); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("lvalue",11, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lvalues ::= lvalue 
            {
              List<Lvalue> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Lvalue lv = (Lvalue)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(nil,lv); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("lvalues",12, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lvalues ::= lvalues COMMA lvalue 
            {
              List<Lvalue> RESULT =null;
		int lvsleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int lvsright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		List<Lvalue> lvs = (List<Lvalue>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Lvalue lv = (Lvalue)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(lvs, lv); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("lvalues",12, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = ((true) ? new IntConst(n) : new NullExp()); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= FLOAT_LITERAL 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = ((true) ? new FloatConst(f) : new NullExp()); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = ((true) ? new StringConst(s) : new NullExp()); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanConst(true); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanConst(false); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= lvalue 
            {
              Expr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Lvalue lv = (Lvalue)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new LvalExp(lv); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new UnOpExp("uminus", e);
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new UnOpExp("not", e); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("plus",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("minus",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("times",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("div",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("mod",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("and",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("or",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("eq",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr NEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("neq",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("lt",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr LEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("leq",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("gt",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr GEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BinOpExp("geq",e1,e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= ARRAY LP expr COMMA expr RP 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new ArrayGen(e1, e2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= ID LP RP 
            {
              Expr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		 RESULT = new CallExp(nm, nil); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= ID LP expl RP 
            {
              Expr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new CallExp(nm, el); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= LB assign_list RB 
            {
              Expr RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Bind<Expr>> al = (List<Bind<Expr>>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new RecordExp(al); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= LP RP 
            {
              Expr RESULT =null;
		 RESULT = new NullExp(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= LP expl RP 
            {
              Expr RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new TupleExp(el); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= LSB expl RSB 
            {
              Expr RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new ArrayExp(el); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expl ::= expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(nil,e); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expl",7, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expl ::= expl COMMA expr 
            {
              List<Expr> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(el, e); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expl",7, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assign_list ::= ID EQUAL expr 
            {
              List<Bind<Expr>> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(nil, new Bind(nm, e)); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("assign_list",13, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assign_list ::= assign_list COMMA ID EQUAL expr 
            {
              List<Bind<Expr>> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).right;
		List<Bind<Expr>> al = (List<Bind<Expr>>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = append(al, new Bind(nm, e)); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("assign_list",13, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt ::= lvalue EQUAL expr 
            {
              Stmt RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Lvalue lv = (Lvalue)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new AssignSt(lv, e); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= ID LP RP 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		 RESULT = new CallSt(nm, nil); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= ID LP expl RP 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new CallSt(nm, el); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= LB block_content RB 
            {
              Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		BlockSt b = (BlockSt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new BlockSt(nil, nil); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= READ LP lvalues RP 
            {
              Stmt RESULT =null;
		int lvsleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int lvsright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Lvalue> lvs = (List<Lvalue>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new ReadSt(lvs); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= PRINT LP RP 
            {
              Stmt RESULT =null;
		 RESULT = new PrintSt(nil); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmt ::= PRINT LP expl RP 
            {
              Stmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = new PrintSt(el); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmt ::= IF LP expr RP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new IfSt(e, s1, null); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new IfSt(e, s1, s2); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmt ::= FOR LP ID EQUAL expr TO expr RP stmt 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new ForSt(nm, e1, e2, null, s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmt ::= FOR LP ID EQUAL expr TO expr BY expr RP stmt 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new ForSt(nm, e1, e2, e3, s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-10)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmt ::= WHILE LP expr RP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new WhileSt(e, s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmt ::= LOOP stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new LoopSt(s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmt ::= EXIT 
            {
              Stmt RESULT =null;
		 RESULT = new ExitSt(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmt ::= RETURN 
            {
              Stmt RESULT =null;
		 RESULT = new ReturnSt(); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt ::= RETURN expr 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new ReturnValueSt(e); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmts ::= stmt SEMI 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = append(nil,s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmts ::= stmts stmt SEMI 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = append(sl, s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SplParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SplParser$do_action(
    int                        CUP$SplParser$act_num,
    java_cup.runtime.lr_parser CUP$SplParser$parser,
    java.util.Stack            CUP$SplParser$stack,
    int                        CUP$SplParser$top)
    throws java.lang.Exception
    {
              return CUP$SplParser$do_action_part00000000(
                               CUP$SplParser$act_num,
                               CUP$SplParser$parser,
                               CUP$SplParser$stack,
                               CUP$SplParser$top);
    }
}

}
